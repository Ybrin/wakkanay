import { initialize } from '../src/load'
import { DeciderManager } from '../src'
import { InMemoryKeyValueStore } from '@cryptoeconomicslab/level-kvs'
import { Bytes, Address } from '@cryptoeconomicslab/primitives'

describe('load', () => {
  test('initialize', async () => {
    const deciderManager = new DeciderManager(
      new InMemoryKeyValueStore(Bytes.fromString('witness'))
    )
    // This JSON is generated by ovm-contract deployer
    const testConfig = `{
      "logicalConnectiveAddressTable": {
        "Not": "0x9FBDa871d559710256a2502A2517b794B482Db40",
        "And": "0x2C2B9C9a4a25e24B174f26114e8926a9f2128FE4",
        "ForAllSuchThat": "0x30753E4A8aad7F8597332E813735Def5dD395028"
      },
      "atomicPredicateAddressTable": {
        "IsValidSignature": "0xFB88dE099e13c3ED21F80a7a1E49f8CAEcF10df6",
        "IsContained": "0xAa588d3737B611baFD7bD713445b314BD453a5C8",
        "IsLessThan": "0xd5dd64faaf8af5ff95b30d727e2b832b7964c16e",
        "Equal": "0xea1ca2f6e17b158f5b8c3a00e54a8f0e0f8f04bf",
        "VerifyInclusion": "0xfa088b2aaf4839d738d5a3d436021c6ad424269a",
        "IsSameAmount": "0xc8fd3b9399f47610f27d6b604749276865085937"
      },
      "deployedPredicateTable": {
        "OwnershipPredicate": {
          "deployedAddress": "0xeec918d74c746167564401103096D45BbD494B74",
          "source": [
            {
              "type": "CompiledPredicate",
              "name": "Ownership",
              "inputDefs": ["owner", "tx"],
              "contracts": [
                {
                  "type": "IntermediateCompiledPredicate",
                  "originalPredicateName": "Ownership",
                  "name": "OwnershipT",
                  "connective": "ThereExistsSuchThat",
                  "inputDefs": ["OwnershipT", "owner", "tx"],
                  "inputs": [
                    "signatures,KEY,\${tx}",
                    "v0",
                    {
                      "type": "AtomicProposition",
                      "predicate": {
                        "type": "AtomicPredicateCall",
                        "source": "IsValidSignature"
                      },
                      "inputs": [
                        { "type": "NormalInput", "inputIndex": 2, "children": [] },
                        { "type": "NormalInput", "inputIndex": 1, "children": [] },
                        {
                          "type": "VariableInput",
                          "placeholder": "v0",
                          "children": []
                        },
                        { "type": "ConstantInput", "name": "secp256k1" }
                      ]
                    }
                  ],
                  "propertyInputs": []
                }
              ],
              "entryPoint": "OwnershipT",
              "constants": [{ "varType": "bytes", "name": "secp256k1" }]
            }
          ]
        }
      },
      "constantVariableTable": { "secp256k1": "0x736563703235366b31" },
      "commitmentContract": "0x8CdaF0CD259887258Bc13a92C0a6dA92698644C0",
      "adjudicationContract": "0x8f0483125FCb9aaAEFA9209D8E9d7b9C8B9Fb90F",
      "payoutContracts": {
        "DepositContract": "0xA4392264a2d8c998901D10C154C91725b1BF0158",
        "OwnershipPayout": "0xf204a4Ef082f5c04bB89F7D5E6568B796096735a"
      },
      "PlasmaETH": "0x13274Fe19C0178208bCbee397af8167A7be27f6f"
    }
    `
    initialize(deciderManager, JSON.parse(testConfig))
    expect(deciderManager.getDeciderAddress('And')).toEqual(
      Address.from('0x2C2B9C9a4a25e24B174f26114e8926a9f2128FE4')
    )
    expect(deciderManager.getDeciderAddress('IsValidSignature')).toEqual(
      Address.from('0xFB88dE099e13c3ED21F80a7a1E49f8CAEcF10df6')
    )
    expect(deciderManager.shortnameMap.get('Ownership')).toEqual(
      Address.from('0xeec918d74c746167564401103096d45bbd494b74')
    )
  })
})
