import { InMemoryKeyValueStore, RangeDb } from '../../src/db'

describe('RangeDb', () => {
  it('get ranges', async () => {
    const kvs = new InMemoryKeyValueStore('root')
    const rangeDb = new RangeDb(kvs)
    await rangeDb.put(0, 100, 'alice')
    await rangeDb.put(100, 200, 'bob')
    await rangeDb.put(200, 300, 'carol')
    const ranges = await rangeDb.get(0, 300)
    expect(ranges.length).toEqual(3)
  })
  it('get small range', async () => {
    const kvs = new InMemoryKeyValueStore('root')
    const rangeDb = new RangeDb(kvs)
    await rangeDb.put(120, 150, 'alice')
    await rangeDb.put(0, 20, 'bob')
    await rangeDb.put(500, 600, 'carol')
    const ranges = await rangeDb.get(100, 200)
    expect(ranges.length).toEqual(1)
  })
  it('get large range', async () => {
    const kvs = new InMemoryKeyValueStore('root')
    const rangeDb = new RangeDb(kvs)
    await rangeDb.put(0, 500, 'alice')
    const ranges = await rangeDb.get(100, 200)
    expect(ranges.length).toEqual(1)
  })
  it("don't get edge", async () => {
    const kvs = new InMemoryKeyValueStore('root')
    const rangeDb = new RangeDb(kvs)
    await rangeDb.put(80, 100, 'alice')
    const ranges = await rangeDb.get(100, 200)
    expect(ranges.length).toEqual(0)
  })
  it('del ranges', async () => {
    const kvs = new InMemoryKeyValueStore('root')
    const rangeDb = new RangeDb(kvs)
    await rangeDb.put(0, 100, 'alice')
    await rangeDb.put(100, 200, 'bob')
    await rangeDb.put(200, 300, 'carol')
    await rangeDb.del(0, 300)
    const ranges = await rangeDb.get(0, 300)
    expect(ranges.length).toEqual(0)
  })
  it('update range', async () => {
    const kvs = new InMemoryKeyValueStore('root')
    const rangeDb = new RangeDb(kvs)
    await rangeDb.put(0, 300, 'alice')
    await rangeDb.put(100, 200, 'bob')
    const ranges = await rangeDb.get(0, 300)
    expect(ranges.length).toEqual(3)
    expect(ranges[0].value).toEqual('alice')
    expect(ranges[1].value).toEqual('bob')
    expect(ranges[2].value).toEqual('alice')
  })
})
